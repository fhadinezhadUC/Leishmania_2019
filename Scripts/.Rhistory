source('~/Leishmania_2019/Leishmania_2019/Scripts/Integrate_Tse_Ara.R')
library(IRanges)
library(stringr)
library(miceadds)
library(GenomicRanges)
library(gdata)
# read ara
resultpath <- "/home/fatemeh/Leishmania_2019/Leishmania_2019/Results/Integrated_Genes/"
ara_filenames <-
list.files(
"/home/fatemeh/Leishmania_2019/Leishmania_2019/Results/AragornGenes/",
pattern = "*.ara.out",
full.names = TRUE
)
#just take the ara_filenames and make the tse file for it to read.
tse_filenames <- ara_filenames
tse_ss_filenames <- ara_filenames
for (i in 1:length(ara_filenames)) {
namearray <- unlist(strsplit(ara_filenames[i], split = "/"))
nameorg <- namearray[length(namearray)]
nameorg <- unlist(strsplit(nameorg, split = ".ara.out"))[1]
tse_filenames[i] = paste(
"/home/fatemeh/Leishmania_2019/Leishmania_2019/Results/tRNAScanGenes/tse.out/",
nameorg,
".tse.out",
sep = ""
)
tse_ss_filenames[i] = paste(
"/home/fatemeh/Leishmania_2019/Leishmania_2019/Results/tRNAScanGenes/ss.tse.out/",
nameorg,
".SS.tse.out",
sep = ""
)
}
aradf <- making_ara_df(ara_filenames[1])
tsedf <-
making_tse_df(tse_filenames[1], tse_ss_filenames[1])
integrated_tse_ara <- integrate(aradf, tsedf)
for (i in 2:length(ara_filenames)) {
aradf <- making_ara_df(ara_filenames[i])
tsedf <-
making_tse_df(tse_filenames[i], tse_ss_filenames[i])
temp_integrated <- integrate(aradf, tsedf)
integrated_tse_ara <-
rbind(integrated_tse_ara, temp_integrated)
}
nrow()
nrow(integrated_tse_ara)
integrated_tse_ara <- addfuncTypes(integrated_tse_ara)
integrated_tse_ara <- initiatorDetecting(integrated_tse_ara)
formatoutput(integrated_tse_ara,resultpath)
resultpath <- "/home/fatemeh/Leishmania_2019/Leishmania_2019/Results/Integrated_Genes/"
ara_filenames <-
list.files(
"/home/fatemeh/Leishmania_2019/Leishmania_2019/Results/AragornGenes/",
pattern = "*.ara.out",
full.names = TRUE
)
#just take the ara_filenames and make the tse file for it to read.
tse_filenames <- ara_filenames
tse_ss_filenames <- ara_filenames
for (i in 1:length(ara_filenames)) {
namearray <- unlist(strsplit(ara_filenames[i], split = "/"))
nameorg <- namearray[length(namearray)]
nameorg <- unlist(strsplit(nameorg, split = ".ara.out"))[1]
tse_filenames[i] = paste(
"/home/fatemeh/Leishmania_2019/Leishmania_2019/Results/tRNAScanGenes/tse.out/",
nameorg,
".tse.out",
sep = ""
)
tse_ss_filenames[i] = paste(
"/home/fatemeh/Leishmania_2019/Leishmania_2019/Results/tRNAScanGenes/ss.tse.out/",
nameorg,
".SS.tse.out",
sep = ""
)
}
aradf <- making_ara_df(ara_filenames[1])
tsedf <-
making_tse_df(tse_filenames[1], tse_ss_filenames[1])
integrated_tse_ara <- integrate(aradf, tsedf)
for (i in 2:length(ara_filenames)) {
aradf <- making_ara_df(ara_filenames[i])
tsedf <-
making_tse_df(tse_filenames[i], tse_ss_filenames[i])
temp_integrated <- integrate(aradf, tsedf)
integrated_tse_ara <-
rbind(integrated_tse_ara, temp_integrated)
}
integrated_tse_ara <- addfuncTypes(integrated_tse_ara)
geneDF <- integrated_tse_ara
iscat <- geneDF$araac == "(cat)" & geneDF$tseac == "CAT"
catDF <- geneDF[iscat, ]
# we have 173 cat genes found by both ara and tse
# we have 4 cat ara genes not detected by tse
# we have 2 genes found by both ara and tse but they are cat in tse and cta in ara
# what to do with these 6 genes ?
geneseqs <- character(length = nrow(catDF))
for (i in 1:nrow(catDF)) {
if (catDF$foundby[i] == "both")
geneseqs[i] <- catDF$tsegeneseq[i]
else if (catDF$foundby[i] == "tse")
geneseqs[i] <- catDF$tsegeneseq[i]
else if (catDF$foundby[i] == "ara")
geneseqs[i] <- catDF$arageneseq[i]
}
m <- matrix(nrow = nrow(catDF), ncol = nrow(catDF))
distanceDF <- as.data.frame(m)
for (i in 1:length(geneseqs)) {
for (j in 1:length(geneseqs)) {
distanceDF[i, j] <- adist(geneseqs[i], geneseqs[j])
}
}
m <- matrix(nrow = nrow(clus1DF), ncol = nrow(clus1DF))
distanceDF <- as.data.frame(m)
for (i in 1:length(clus1DF$tsegeneseq)) {
for (j in 1:length(clus1DF$tsegeneseq)) {
distanceDF[i, j] <- adist(clus1DF$tsegeneseq[i], clus1DF$tsegeneseq[j])
}
}
m <- matrix(nrow = nrow(clus2DF), ncol = nrow(clus2DF))
distanceDF <- as.data.frame(m)
for (i in 1:length(clus2DF$tsegeneseq)) {
for (j in 1:length(clus2DF$tsegeneseq)) {
distanceDF[i, j] <- adist(clus2DF$tsegeneseq[i], clus2DF$tsegeneseq[j])
}
}
iscat <- geneDF$araac == "(cat)" & geneDF$tseac == "CAT"
catDF <- geneDF[iscat, ]
# we have 173 cat genes found by both ara and tse
# we have 4 cat ara genes not detected by tse
# we have 2 genes found by both ara and tse but they are cat in tse and cta in ara
# what to do with these 6 genes ?
geneseqs <- character(length = nrow(catDF))
for (i in 1:nrow(catDF)) {
if (catDF$foundby[i] == "both")
geneseqs[i] <- catDF$tsegeneseq[i]
else if (catDF$foundby[i] == "tse")
geneseqs[i] <- catDF$tsegeneseq[i]
else if (catDF$foundby[i] == "ara")
geneseqs[i] <- catDF$arageneseq[i]
}
m <- matrix(nrow = nrow(catDF), ncol = nrow(catDF))
distanceDF <- as.data.frame(m)
for (i in 1:length(geneseqs)) {
for (j in 1:length(geneseqs)) {
distanceDF[i, j] <- adist(geneseqs[i], geneseqs[j])
}
}
library(cluster)    # clustering algorithms
library(factoextra) # clustering visualization
library(dendextend) # for comparing two dendrograms
# The height of the fusion, provided on the vertical axis, indicates the (dis)similarity between two observations.
# Note that, conclusions about the proximity of two observations can be drawn only based on the height where branches
# containing those two observations first are fused. We cannot use the proximity of two observations along the horizontal axis as a criteria of their similarity
hc <- hclust(as.dist(distanceDF), method = 'ward.D2')
plot(hc, cex = 0.6, hang = -1)
# The height of the cut to the dendrogram controls the number of clusters obtained. It plays the same role as the k in k-means clustering.
#
rect.hclust(hc, k = 3, border = 2:5)
sub_groups <- cutree(hc, k = 3)
fviz_cluster(list(data = distanceDF, cluster = sub_groups))
# extracting minimum and maximum
subg1 <- sub_groups == 1
subg2 <- sub_groups == 2
subg3 <- sub_groups == 3
cluster1 <-
paste(min(distanceDF[subg1, subg1]), max(distanceDF[subg1, subg1]), sep = "-")
cluster2 <-
paste(min(distanceDF[subg2, subg2]), max(distanceDF[subg2, subg2]), sep = "-")
cluster3 <-
paste(min(distanceDF[subg3, subg3]), max(distanceDF[subg3, subg3]), sep = "-")
clusterDF <- data.frame(table(sub_groups))
clusterDF$editdistanceRange <- c(cluster1, cluster2, cluster3)
clus1DF <- catDF[subg1, ]
clus2DF <- catDF[subg2, ]
clus3DF <- catDF[subg3, ]
## making a table with columns: Clusters, 1-72(A-T), 29-41(GC), 30-40(GC/T),31-39(GF), 32,33,34,35,36,37,38
## green green indicates bases conserved in all initiators throughout the three domains
m <- matrix(nrow = 3,
ncol = 9,
data = 0)
summerytable <- as.data.frame(m)
names(summerytable) <-
c(
"Clusters",
"#tRNAs",
"11â€“24(C-G)",
"54-60(A-A)(T-T)",
"1-72(A-T)",
"29-31(GGG)",
"39-41(CCC/CCT)",
"#posisInDloop",
"20A"
)
summerytable[, 1] <- c("Cluster1", "Cluster2", "Cluster3")
summerytable[, 2] <- c(nrow(clus1DF), nrow(clus2DF), nrow(clus3DF))
GC1 = 0
for (i in 1:nrow(clus1DF)) {
if ((substring(clus1DF$tsegeneseq[i], 11, 11) == "C") &
(substring(clus1DF$tsegeneseq[i], 23, 23) == "G"))
GC1 <- GC1 + 1
}
GC2 = 0
for (i in 1:nrow(clus2DF)) {
if ((substring(clus2DF$tsegeneseq[i], 11, 11) == "C") &
(substring(clus2DF$tsegeneseq[i], 24, 24) == "G"))
GC2 <- GC2 + 1
}
GC3 = 0
summerytable[, 3] <- c(GC1, GC2, GC3)
AA1 = 0
for (i in 1:nrow(clus1DF)) {
if (((substring(clus1DF$tsegeneseq[i], 53, 53) == "A") &
(substring(clus1DF$tsegeneseq[i], 59, 59) == "A")) |
((substring(clus1DF$tsegeneseq[i], 53, 53) == "T") &
(substring(clus1DF$tsegeneseq[i], 59, 59) == "T")))
AA1 <- AA1 + 1
}
AA2 = 0
for (i in 1:nrow(clus2DF)) {
if (((substring(clus2DF$tsegeneseq[i], 54, 54) == "A") &
(substring(clus2DF$tsegeneseq[i], 60, 60) == "A")) |
(substring(clus2DF$tsegeneseq[i], 54, 54) == "T") &
(substring(clus2DF$tsegeneseq[i], 60, 60) == "T"))
AA2 <- AA2 + 1
}
AA3 = 0
summerytable[, 4] <- c(AA1, AA2, AA3)
AT1 = 0
for (i in 1:nrow(clus1DF)) {
if ((substring(clus1DF$tsegeneseq[i], 1, 1) == "A") &
(substring(clus1DF$tsegeneseq[i], 71, 71) == "T"))
AT1 <- AT1 + 1
}
AT2 = 0
for (i in 1:nrow(clus2DF)) {
if ((substring(clus2DF$tsegeneseq[i], 1, 1) == "A") &
(substring(clus2DF$tsegeneseq[i], 72, 72) == "T"))
AT2 <- AT2 + 1
}
AT3 = 0
summerytable[, 5] <- c(AT1, AT2, AT3)
GGG1 = 0
for (i in 1:nrow(clus1DF)) {
if ((substring(clus1DF$tsegeneseq[i], 28, 30) == "GGG"))
GGG1 <- GGG1 + 1
}
GGG2 = 0
for (i in 1:nrow(clus2DF)) {
if ((substring(clus2DF$tsegeneseq[i], 28, 30) == "GGG"))
GGG2 <- GGG2 + 1
}
GGG3 = 0
summerytable[, 6] <- c(GGG1, GGG2, GGG3)
CCC1 = 0
for (i in 1:nrow(clus1DF)) {
if ((substring(clus1DF$tsegeneseq[i], 38, 40) == "CCC") |
(substring(clus1DF$tsegeneseq[i], 38, 40) == "CCT"))
CCC1 <- CCC1 + 1
}
CCC2 = 0
for (i in 1:nrow(clus2DF)) {
if ((substring(clus2DF$tsegeneseq[i], 40, 42) == "CCC") |
(substring(clus2DF$tsegeneseq[i], 40, 42) == "CCT"))
CCC2 <- CCC2 + 1
}
CCC3 = 0
summerytable[, 7] <- c(CCC1, CCC2, CCC3)
summerytable[, 8] <- c(7, 8, "8/9")
A120 = 0
for (i in 1:nrow(clus1DF)) {
if ((substring(clus1DF$tsegeneseq[i], 19, 19) == "A"))
A120 <- A120 + 1
}
A220 = 0
A320 = 0
summerytable[, 9] <- c(A120, A220, A320)
summerytable[3, ] <- c("Cluster3", 2, 2, 2, 0, 0, 0, "8/9", 0)
summerytable
for (i in 1:nrow(clus1DF)) {
geneDF[geneDF$geneid == clus1DF$geneid[i], ]$arafunc <- "X"
geneDF[geneDF$geneid == clus1DF$geneid[i], ]$tsefunc <- "X"
}
#summerytable[3, ] <- c("Cluster3", 2, 2, 2, 0, 0, 0, "8/9", 0)
# add one column to see the min and max distance of sequences in one cluster
summerytable$distanceRange <- ""
m <- matrix(nrow = nrow(clus1DF), ncol = nrow(clus1DF))
distanceDF <- as.data.frame(m)
for (i in 1:length(clus1DF$tsegeneseq)) {
for (j in 1:length(clus1DF$tsegeneseq)) {
distanceDF[i, j] <- adist(clus1DF$tsegeneseq[i], clus1DF$tsegeneseq[j])
}
}
summerytable$distanceRange[1] <- paste(min(distanceDF),max(distanceDF),sep = "-")
m <- matrix(nrow = nrow(clus2DF), ncol = nrow(clus2DF))
distanceDF <- as.data.frame(m)
for (i in 1:length(clus2DF$tsegeneseq)) {
for (j in 1:length(clus2DF$tsegeneseq)) {
distanceDF[i, j] <- adist(clus2DF$tsegeneseq[i], clus2DF$tsegeneseq[j])
}
}
summerytable$distanceRange[2] <- paste(min(distanceDF),max(distanceDF),sep = "-")
m <- matrix(nrow = nrow(clus1DF), ncol = nrow(clus1DF))
distanceDF <- as.data.frame(m)
for (i in 1:length(clus1DF$tsegeneseq)) {
for (j in 1:length(clus1DF$tsegeneseq)) {
distanceDF[i, j] <- adist(clus1DF$tsegeneseq[i], clus1DF$tsegeneseq[j])
}
}
m <- matrix(nrow = nrow(clus3DF), ncol = nrow(clus3DF))
distanceDF <- as.data.frame(m)
for (i in 1:length(clus3DF$tsegeneseq)) {
for (j in 1:length(clus3DF$tsegeneseq)) {
distanceDF[i, j] <- adist(clus3DF$tsegeneseq[i], clus3DF$tsegeneseq[j])
}
}
summerytable$distanceRange[3] <- paste(min(distanceDF),max(distanceDF),sep = "-")
summerytable
table(geneDF$arafunc)
integrated_tse_ara <- geneDF
formatoutput(integrated_tse_ara,resultpath)
outputpath <- "/home/fatemeh/Leishmania_2019/Leishmania_2019/Results/Integrated_Genes/"
genefilepath <- "/home/fatemeh/Leishmania_2019/Leishmania_2019/Results/Integrated_Genes/integrated_tse_ara.txt"
geneDF <- read.table(genefilepath, header = TRUE,colClasses = "character")
# make a summary table for the 4 sets of genes found by ara, tse, their intersection, and union
summery_table(geneDF)
source('~/Leishmania_2019/Leishmania_2019/Scripts/genefile_summary.R')
outputpath <- "/home/fatemeh/Leishmania_2019/Leishmania_2019/Results/Integrated_Genes/"
genefilepath <- "/home/fatemeh/Leishmania_2019/Leishmania_2019/Results/Integrated_Genes/integrated_tse_ara.txt"
geneDF <- read.table(genefilepath, header = TRUE,colClasses = "character")
summery_table(geneDF)
paste(summerytable[1,],collapse = " & ")
summerytable <- summery_table(geneDF)
paste(summerytable[1,],collapse = " & ")
summerytable
source('~/Leishmania_2019/Leishmania_2019/Scripts/genefile_summary.R')
summerytable <- summery_table(geneDF)
paste(summerytable[1,],collapse = " & ")
paste(summerytable[2,],collapse = " & ")
paste(summerytable[3,],collapse = " & ")
paste(summerytable[4,],collapse = " & ")
paste(names(summerytable),collapse = " & ")
source('~/Leishmania_2019/Leishmania_2019/Scripts/genefile_summary.R')
source('~/Leishmania_2019/Leishmania_2019/Scripts/genefile_summary.R')
vidualization(geneDF)
integrated_tse_ara <- geneDF
genometRNAdf <-
data.frame(
integrated_tse_ara$sourceOrg,
integrated_tse_ara$arafunc,
integrated_tse_ara$tsefunc,
integrated_tse_ara$foundby
)
names(genometRNAdf) <- c("sourceOrg", "arafunc", "tsefunc","foundby")
genome_list = split(genometRNAdf, f = genometRNAdf$sourceOrg)
tRNAcountdf <- data.frame(names(genome_list))
tRNAcountdf$aracounts <- 0
tRNAcountdf$tsecounts <- 0
tRNAcountdf$unioncounts <- 0
tRNAcountdf$interscounts <- 0
names(tRNAcountdf) <- c("genome", "aracounts","tsecounts","unioncounts","interscounts")
for (i in 1:length(genome_list)) {
tRNAcountdf$genome[i] <- names(genome_list[i])
currentgenedf <- genome_list[[i]]
# for each genome df make the union, inters, tse and ara df
both <- currentgenedf$foundby == "both"
tseonly <- currentgenedf$foundby == "tse"
araonly <- currentgenedf$foundby == "ara"
istse <- (tseonly | both)
isara <- (araonly | both)
isintersect_tse_ara <- both
tse <- currentgenedf[istse, ]
ara <- currentgenedf[isara, ]
# for intersection if tse and aragorn do not match we do not consider them in our counting
intersect_tse_ara <- currentgenedf[isintersect_tse_ara, ]
intersect_tse_ara <- intersect_tse_ara[as.character(intersect_tse_ara$tsefunc)==as.character(intersect_tse_ara$arafunc),]
union_tse_ara <- currentgenedf
tRNAcountdf$aracounts[i] <- nrow(ara)
tRNAcountdf$tsecounts[i] <- nrow(tse)
tRNAcountdf$unioncounts[i] <- nrow(union_tse_ara)
tRNAcountdf$interscounts[i] <- nrow(intersect_tse_ara)
}
# keep this order for after filtering vidualization
tRNAcountdf <- tRNAcountdf[order(tRNAcountdf$interscounts), ]
tRNAcountdf$genome <-
factor(tRNAcountdf$genome, levels = tRNAcountdf$genome)
#
# mymatrix <- rbind(tRNAcountdf$aracounts,tRNAcountdf$tsecounts)
# colnames(mymatrix) <- tRNAcountdf$genome
# barplot(mymatrix,beside = TRUE,col = c("blue","red"),las=2,cex.names=0.6)
#
library(ggplot2)
p <- ggplot(data = tRNAcountdf, aes(x = genome, y = interscounts)) +
geom_bar(stat = "identity", fill = "steelblue") + geom_text(
aes(label = interscounts),
vjust = 1.2,
color = "white",
position = position_dodge(0.9),
size = 3.5
) + theme(axis.text.x = element_text(angle = 90, hjust = 1),
plot.title = element_text(hjust = 0.5)) +
labs(title =
"Number of tRNA genes (intersection of genes found by ARA and TSE) in TryTryp genomes",
x =
"Genome", y = "Number of tRNA genes")
p
ggsave(
paste(outputpath, "intersecttRNAcounts.png", sep = ""),
width = 14,
height = 7
)
# second plot _______________________________________________________________________________
tRNAcountdf$genome <-
as.character(tRNAcountdf$genome, levels = tRNAcountdf$genome)
func_classes <-
c(
"A",
"R",
"N" ,
"D",
"C" ,
"Q",
"E",
"G",
"H",
"I",
"L",
"K",
"M" ,
"X",
"F",
"P",
"S",
"T",
"W",
"Y" ,
"V",
"Z"
)
tRNAcountdf$percent_21 <- 0
tRNAcountdf$missing <- ''
for (i in 1:length(genome_list)) {
# remove function Z for now
currentgenedf <- genome_list[[i]]
both <- currentgenedf$foundby == "both"
intersect_tse_ara <- currentgenedf[both,]
intersect_tse_ara <- intersect_tse_ara[as.character(intersect_tse_ara$tsefunc)==as.character(intersect_tse_ara$arafunc),]
countsdf <-
as.data.frame(table(as.character(intersect_tse_ara$arafunc)))
tRNAcountdf[tRNAcountdf$genome == names(genome_list[i]),]$missing <-
paste(setdiff(func_classes, as.character(countsdf$Var1)), collapse = " ")
diffset <- setdiff(func_classes, as.character(countsdf$Var1))
fcount <- 22 - length(diffset)
tRNAcountdf[tRNAcountdf$genome == names(genome_list[i]),]$percent_21 <-
(fcount / 22) * 100
# make a vector of missing functional classes
}
tRNAcountdf$genome <-
factor(tRNAcountdf$genome, levels = tRNAcountdf$genome)
p <- ggplot(data = tRNAcountdf, aes(x = genome, y = percent_21)) +
geom_bar(stat = "identity", fill = "#56B4E9")  + theme(axis.text.x = element_text(angle = 90, hjust = 1),
plot.title = element_text(hjust = 0.5)) +
labs(title =
"Percentage of 21 tRNA functional classes covered by each genome considering genes found by ARA only",
x =
"Genome", y = "Percentage of tRNA functional classes(total=21)") + geom_text(
aes(label =
missing),
vjust = 0.5,
angle = 90,
hjust = -0.1
)
p
ggsave(paste(outputpath, "ara_funcPerc.png", sep = ""),
width = 14,
height = 7)
vidualization(geneDF,outputpath)
source('~/Leishmania_2019/Leishmania_2019/Scripts/genefile_summary.R')
vidualization(geneDF,outputpath)
endDisplacement(geneDF,outputpath)
